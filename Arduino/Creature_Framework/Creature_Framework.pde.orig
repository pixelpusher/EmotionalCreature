//
// RGOL Creature framework code
//

<<<<<<< HEAD
//#include <Ports.h>
//#include <RF12.h> // needed to avoid a linker error :(


//PortI2C myBus (2);
//DimmerPlug dimmer (myBus, 0x41);
=======
#include <Ports.h>
#include <RF12.h> // needed to avoid a linker error :(


PortI2C myBus (2);
DimmerPlug dimmer (myBus, 0x40);
>>>>>>> brainflakes/master

// the pin on which the speaker is attached 
int soundPin=3; // I on port 4

#include "Math.h"
#include "SoundInternal.h"
#include "Sounds.h"
<<<<<<< HEAD

void setup()
{
 // dimmer.begin();
  
  // set up for totem pole - make it white, must be attached to power
  //dimmer.setReg(dimmer.MODE2, 0x14);
  
}

void loop()
{
  setToneSimple();
  playDemoSounds();
  
  setToneWave(300, 100);
  playDemoSounds();
  setToneWave(500, 20);
  playDemoSounds();
  
  setToneChord(300, 2, 100);
  playDemoSounds();
  setToneChord(200, 4, 50);
  playDemoSounds();
  setToneChord(200, 3, 10);
  playDemoSounds();
  
  setToneRandom(200, 1);
  playDemoSounds();
  setToneRandom(200, 10);
  playDemoSounds();
  setToneRandom(200, 50);
  playDemoSounds();
=======
#include "LightInternal.h"
#include "Light.h"

void setup()
{
  dimmer.begin();
  
  // set up for totem pole - make it white, must be attached to power
  dimmer.setReg(dimmer.MODE2, 0x05);
  
  Serial.begin(57600); // for debugging only
}


void loop()
{
 
 
 for(int i=0;i<2; i++)
 { 
   int r=0;
   int g=0;
   int b=0;
   while(r+g+b < 200)
   {
     r=random(0,2)*127;
     g=random(0,2)*127;
     b=random(0,2)*127;
   }
   lightFade(i, r, g, b, 200); 
 }
 wait(500); 
 

  
  /*
  
  setInstrumentSimple();
  
 playSoundRamp(100, 800, 300);
  
 lightFade(0, 0, 0, 0, 500); 
 lightFade(1, 0, 0, 0, 500);
 wait(1000); 
 playSoundRamp(200, 900, 300);
 wait(1000); 
 
 playSoundRamp(150, 850, 300);
 
 lightFade(0, 255, 255, 255, 500); 
 lightFade(1, 255, 255, 255, 500);
 wait(2000); 
 
 lightFade(0, 255, 0, 0, 500); 
 lightFade(1, 255, 0, 0, 500);
 wait(200); 
 playSoundRamp(100, 1000, 500);
 wait(1800); 
 

 setInstrumentWave(300, 100); 
 playSoundRamp(1000, 100, 3000);
 
 lightFade(0, 0, 255, 0, 500); 
 lightFade(1, 0, 255, 0, 500);
 wait(2000); 
 
 lightFade(0, 0, 0, 255, 500); 
 lightFade(1, 0, 0, 255, 500);
 wait(2000); 


setInstrumentChord(200, 3, 10);
playSoundWave(300, 200, 500, 4000);

for(int i=0; i<100; i++)
{
 lightFade(0, 0, 0, 0, 5); 
 lightFade(1, 0, 0, 0, 5);
 wait(20); 
 
 lightFade(0, 255, 255, 255, 5); 
 lightFade(1, 255, 255, 255, 5);
 wait(20); 
}

*/


 
 /*
 lightFade(0, white*255, white*255, white*255, 100); white = 1-white;
 lightFade(1, 0, 255, 0, 100);
 wait(1000); 
 
 lightFade(0, white*255, white*255, white*255, 100); white = 1-white;
 lightFade(1, 0, 0, 255, 100);
 wait(1000);
  */
 /* 
 lightFade(0, 255, 0, 0, 1500);
 lightFade(1, 0, 255, 255, 500);
 wait(1500);
 
 
 lightFade(0, 255, 0, 255, 1500);
 lightFade(1, 0, 0, 255, 500);
 wait(1500);
 
 lightFade(0, 0, 0, 0, 1500);
 lightFade(1, 0, 0, 0, 500);
 wait(1500);
  */
  /*
  setInstrumentSimple();
  playDemoSounds();
    
  setInstrumentWave(300, 100);
  playDemoSounds();
  setInstrumentWave(500, 20);
  playDemoSounds();
  
  setInstrumentChord(300, 2, 100);
  playDemoSounds();
  setInstrumentChord(200, 4, 50);
  playDemoSounds();
  setInstrumentChord(200, 3, 10);
  playDemoSounds();
  
  setInstrumentRandom(200, 1);
  playDemoSounds();
  setInstrumentRandom(200, 10);
  playDemoSounds();
  setInstrumentRandom(200, 50);
  playDemoSounds();
  */
>>>>>>> brainflakes/master
}

// Plays all demo sounds with set tone
void playDemoSounds()
{
  playSoundNote(300, 1000);
  wait(1000);
  playSoundRamp(100, 500, 1000);
  wait(1000);
  playSoundRamp(800, 50, 1000);
  wait(1000);
  playSoundWave(300, 200, 500 ,2000);
  
  wait(2500);
}

void wait(int ms)
{
  long endTicks = millis() + ms;
  while(millis() < endTicks)
  {
    updateSound();
<<<<<<< HEAD
=======
    updateLight();
>>>>>>> brainflakes/master
    delay(1); 
  }
}


